package com.edfapay.paymentcard.kernel_integration

import com.mastercard.terminalsdk.utility.ByteUtility


internal enum class KernelResponseCode(code: String, val detail: String) {
    CODE_61(
        "61",
        "Command successfully executed; 'XX' bytes of data are available and can be requested using GET RESPONSE"
    ),
    CODE_6200("6200", "No information given (NV-Ram not changed)"),
    CODE_6201("6201", "NV-Ram not changed 1"),
    CODE_6281("6281", "Part of returned data may be corrupted"),
    CODE_6282("6282", "End of file/record reached before reading Le bytes"),
    CODE_6283("6283", "Selected file invalidated"),
    CODE_6284("6284", "Selected file is not valid. FCI not formated according to ISO"),
    CODE_6285("6285", "Selected file is in termination state"),
    CODE_62A2("62A2", "Wrong R-MAC"),
    CODE_62A4("62A4", "Card locked (during reset( ))"),
    CODE_62F1("62F1", "Wrong C-MAC"),
    CODE_62F3("62F3", "Internal reset"),
    CODE_62F5("62F5", "Default agent locked"),
    CODE_62F7("62F7", "Cardholder locked"),
    CODE_62F8("62F8", "Basement is current agent"),
    CODE_62F9("62F9", "CALC Key Set not unblocked"),
    CODE_62("62", "RFU"),
    CODE_6300("6300", "No information given (NV-Ram changed)"),
    CODE_6381("6381", "File filled up by the last write. Loading/updating is not allowed"),
    CODE_6382("6382", "Card key not supported"),
    CODE_6383("6383", "Reader key not supported"),
    CODE_6384("6384", "Plaintext transmission not supported"),
    CODE_6385("6385", "Secured transmission not supported"),
    CODE_6386("6386", "Volatile memory is not available"),
    CODE_6387("6387", "Non-volatile memory is not available"),
    CODE_6388("6388", "Key number not valid"),
    CODE_6389("6389", "Key length is not correct"),
    CODE_63C0("63C0", "Verify fail, no try left"),
    CODE_63C1("63C1", "Verify fail, 1 try left"),
    CODE_63C2("63C2", "Verify fail, 2 tries left"),
    CODE_63C3("63C3", "Verify fail, 3 tries left"),
    CODE_63("63", "RFU"),
    CODE_6400("6400", "No information given (NV-Ram not changed)"),
    CODE_6401("6401", "Command timeout"),
    CODE_64("64", "RFU"),
    CODE_6500("6500", "No information given"),
    CODE_6501(
        "6501",
        "Write error. Memory failure. There have been problems in writing or reading the EEPROM. Other hardware problems may also bring this error"
    ),
    CODE_6581("6581", "Memory failure"),
    CODE_65("65", "RFU"),
    CODE_6669("6669", "Incorrect Encryption/Decryption Padding"),
    CODE_66("66", "-"),
    CODE_6700("6700", "Wrong length"),
    CODE_67("67", "length incorrect (procedure)(ISO 7816-3)"),
    CODE_6800("6800", "No information given (The request function is not supported by the card)"),
    CODE_6881("6881", "Logical channel not supported"),
    CODE_6882("6882", "Secure messaging not supported"),
    CODE_6883("6883", "Last command of the chain expected"),
    CODE_6884("6884", "Command chaining not supported"),
    CODE_68("68", "RFU"),
    CODE_6900("6900", "No information given (Command not allowed)"),
    CODE_6981("6981", "Command incompatible with file structure"),
    CODE_6982("6982", "Security condition not satisfied"),
    CODE_6983("6983", "Authentication method blocked"),
    CODE_6984("6984", "Referenced data reversibly blocked (invalidated)"),
    CODE_6985("6985", "Conditions of use not satisfied"),
    CODE_6986("6986", "Command not allowed (no current EF)"),
    CODE_6987("6987", "Expected secure messaging (SM) object missing"),
    CODE_6988("6988", "Incorrect secure messaging (SM) data object"),
    CODE_6996("6996", "Data must be updated again"),
    CODE_69F0("69F0", "Permission Denied"),
    CODE_69F1("69F1", "Permission Denied - Missing Privilege"),
    CODE_69("69", "RFU"),
    CODE_6A00("6A00", "No information given (Bytes P1 and/or P2 are incorrect)"),
    CODE_6A80("6A80", "The parameters in the data field are incorrect"),
    CODE_6A81("6A81", "Function not supported"),
    CODE_6A82("6A82", "File not found"),
    CODE_6A83("6A83", "Record not found"),
    CODE_6A84("6A84", "There is insufficient memory space in record or file"),
    CODE_6A85("6A85", "Lc inconsistent with TLV structure"),
    CODE_6A86("6A86", "Incorrect P1 or P2 parameter"),
    CODE_6A87("6A87", "Lc inconsistent with P1-P2"),
    CODE_6A88("6A88", "Referenced data not found"),
    CODE_6A89("6A89", "File already exists"),
    CODE_6A8A("6A8A", "DF name already exists"),
    CODE_6AF0("6AF0", "Wrong parameter value"),
    CODE_6A("6A", "RFU"),
    CODE_6B00("6B00", "Wrong parameter(s) P1-P2"),
    CODE_6B("6B", "Reference incorrect (procedure byte), (ISO 78163)"),
    CODE_6C00("6C00", "Incorrect P3 length"),
    CODE_6C("6C", "xx = exact Le"),
    CODE_6D00("6D00", "Instruction code not supported or invalid"),
    CODE_6D("6D", "Instruction code not programmed or invalid (procedure byte), (ISO 7816-3)"),
    CODE_6E00("6E00", "Class not supported"),
    CODE_6E("6E", "Instruction class not supported (procedure byte), (ISO 7816-3)"),
    CODE_6F00(
        "6F00",
        "Command aborted - more exact diagnosis not possible (e.g., operating system error)"
    ),
    CODE_6FFF("6FFF", "Card dead (overuse, â€¦)"),
    CODE_6F("6F", "No precise diagnosis (procedure byte), (ISO 7816-3)"),
    CODE_9000("9000", "Command successfully executed (OK)"),
    CODE_9004("9004", "PIN not successfully verified, 3 or more PIN tries left"),
    CODE_9008("9008", "Key/file not found"),
    CODE_9080("9080", "Unblock Try Counter has reached zero"),
    CODE_9101("9101", "States.activity, States.lock Status or States.lockable has wrong value"),
    CODE_9102("9102", "Transaction number reached its limit"),
    CODE_9210("9210", "No more storage available"),
    CODE_9301("9301", "Integrity error"),
    CODE_9302("9302", "Candidate S2 invalid"),
    CODE_9401("9401", "Candidate currency code does not match purse currency"),
    CODE_9402("9402", "Candidate amount too high"),
    CODE_9403("9403", "Candidate amount too low"),
    CODE_9405("9405", "Problems in the data field"),
    CODE_9407("9407", "Bad currency : purse engine has no slot with R3bc currency"),
    CODE_9408("9408", "R3bc currency not supported in purse engine"),
    CODE_9580("9580", "Bad sequence"),
    CODE_9681("9681", "Slave not found"),
    CODE_9700("9700", "PIN blocked and Unblock Try Counter is 1 or 2"),
    CODE_9702("9702", "Main keys are blocked"),
    CODE_9704("9704", "PIN not successfully verified, 3 or more PIN tries left"),
    CODE_9784("9784", "Base key"),
    CODE_9785("9785", "Limit exceeded - C-MAC key"),
    CODE_9786("9786", "SM error - Limit exceeded - R-MAC key"),
    CODE_9787("9787", "Limit exceeded - sequence counter"),
    CODE_9788("9788", "Limit exceeded - R-MAC length"),
    CODE_9789("9789", "Service not available"),
    CODE_9804("9804", "Access conditions not satisfied"),
    CODE_9900("9900", "1 PIN try left"),
    CODE_9904("9904", "PIN not successfully verified, 1 PIN try left"),
    CODE_9985("9985", "Wrong status - Cardholder lock"),
    CODE_9986("9986", "Missing privilege"),
    CODE_9987("9987", "PIN is not installed"),
    CODE_9988("9988", "Wrong status - R-MAC state"),
    CODE_9A00("9A00", "2 PIN try left"),
    CODE_9A04("9A04", "PIN not successfully verified, 2 PIN try left"),
    CODE_9A71("9A71", "Wrong parameter value - Double agent AID"),
    CODE_9A72("9A72", "Wrong parameter value - Double agent Type"),
    CODE_9D05("9D05", "Incorrect certificate type"),
    CODE_9D07("9D07", "Incorrect session data size"),
    CODE_9D08("9D08", "Incorrect DIR file record size"),
    CODE_9D09("9D09", "Incorrect FCI record size"),
    CODE_9D0A("9D0A", "Incorrect code size"),
    CODE_9D10("9D10", "Insufficient memory to load application"),
    CODE_9D11("9D11", "Invalid AID"),
    CODE_9D12("9D12", "Duplicate AID"),
    CODE_9D13("9D13", "Application previously loaded"),
    CODE_9D14("9D14", "Application history list full"),
    CODE_9D15("9D15", "Application not open"),
    CODE_9D17("9D17", "Invalid offset"),
    CODE_9D18("9D18", "Application already loaded"),
    CODE_9D19("9D19", "Invalid certificate"),
    CODE_9D1A("9D1A", "Invalid signature"),
    CODE_9D1B("9D1B", "Invalid KTU"),
    CODE_9D1D("9D1D", "MSM controls not set"),
    CODE_9D1E("9D1E", "Application signature does not exist"),
    CODE_9D1F("9D1F", "KTU does not exist"),
    CODE_9D20("9D20", "Application not loaded"),
    CODE_9D21("9D21", "Invalid Open command data length"),
    CODE_9D30("9D30", "Check data parameter is incorrect (invalid start address)"),
    CODE_9D31("9D31", "Check data parameter is incorrect (invalid length)"),
    CODE_9D32("9D32", "Check data parameter is incorrect (illegal memory check area)"),
    CODE_9D40("9D40", "Invalid MSM Controls ciphertext"),
    CODE_9D41("9D41", "MSM controls already set"),
    CODE_9D42("9D42", "Set MSM Controls data length less than 2 bytes"),
    CODE_9D43("9D43", "Invalid MSM Controls data length"),
    CODE_9D44("9D44", "Excess MSM Controls ciphertext"),
    CODE_9D45("9D45", "Verification of MSM Controls data failed"),
    CODE_9D50("9D50", "Invalid MCD Issuer production ID"),
    CODE_9D51("9D51", "Invalid MCD Issuer ID"),
    CODE_9D52("9D52", "Invalid set MSM controls data date"),
    CODE_9D53("9D53", "Invalid MCD number"),
    CODE_9D54("9D54", "Reserved field error"),
    CODE_9D55("9D55", "Reserved field error"),
    CODE_9D56("9D56", "Reserved field error"),
    CODE_9D57("9D57", "Reserved field error"),
    CODE_9D60("9D60", "MAC verification failed"),
    CODE_9D61("9D61", "Maximum number of unblocks reached"),
    CODE_9D62("9D62", "Card was not blocked"),
    CODE_9D63("9D63", "Crypto functions not available"),
    CODE_9D64("9D64", "No application loaded"),
    CODE_9E00("9E00", "PIN not installed"),
    CODE_9E04("9E04", "PIN not successfully verified, PIN not installed"),
    CODE_9F00("9F00", "PIN blocked and Unblock Try Counter is 3"),
    CODE_9F04("9F04", "PIN not successfully verified, PIN blocked and Unblock Try Counter is 3");

    val status: ByteArray = ByteUtility.hexStringToByteArray(code)

    companion object {
        /**
         * Method used to get the Status word
         *
         * @param pData bytes array
         * @return the status word
         */
        fun getCode(pData: ByteArray?): KernelResponseCode? {
            var ret: KernelResponseCode? = null
            if (pData != null && pData.size >= 2) {
                for (`val` in values()) {
                    if (`val`.status.size == 1 && pData[pData.size - 2] == `val`.status[0]
                        || pData[pData.size - 2] == `val`.status[0] && pData[pData.size - 1] == `val`.status[1]
                    ) {
                        ret = `val`
                        break
                    }
                }
            }
            return ret
        }
    }
}